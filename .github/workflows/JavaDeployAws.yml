name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CLUSTER_NAME: EKS-QUICK-SERVE
  AWS_REGION: us-east-1
  NODEGROUP_NAME: quick-serve

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      # Verifica o código na branch principal
      - uses: actions/checkout@v4

      # Configura o JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Verifica a versão do Java e Maven
      - name: Check Java Version
        run: java -version

      - name: Check Maven Java Version
        run: mvn -v

      # Faz login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Compila o projeto com Maven, ignorando os testes
      - name: Build Docker Image
        run: |
          IMAGE_NAME=quick-serve-api-pedido:1.0
          docker build -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Faz o push da imagem Docker para o Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag $IMAGE_NAME ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME

  create-cluster:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Check if EKS Cluster Exists
        id: check-cluster
        run: |
          if aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION > /dev/null 2>&1; then
            echo "Cluster exists."
            echo "cluster_exists=true" >> $GITHUB_ENV
          else
            echo "Cluster does not exist."
            echo "cluster_exists=false" >> $GITHUB_ENV
          fi

      - name: Create EKS Cluster
        if: env.cluster_exists == 'false'
        run: |
          aws eks create-cluster \
            --name $CLUSTER_NAME \
            --role-arn arn:aws:iam::133489939751:role/LabRole \
            --resources-vpc-config subnetIds=subnet-0ccd3fe783de143a2,subnet-0fa695d42ad8afd9d,securityGroupIds=sg-0e67dd9b20c5af14c,endpointPublicAccess=true,endpointPrivateAccess=true,publicAccessCidrs="0.0.0.0/0" \
            --kubernetes-version 1.29 \
            --logging '{"clusterLogging":[{"types":["api","audit","authenticator","controllerManager","scheduler"],"enabled":false}]}'

      - name: Wait for EKS Cluster to be Active
        if: env.cluster_exists == 'false'
        run: |
          aws eks wait cluster-active --name $CLUSTER_NAME --region $AWS_REGION

      - name: Check if EKS Node Group Exists
        id: check-nodegroup
        run: |
          if aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODEGROUP_NAME > /dev/null 2>&1; then
            echo "Node Group exists."
            echo "nodegroup_exists=true" >> $GITHUB_ENV
          else
            echo "Node Group does not exist."
            echo "nodegroup_exists=false" >> $GITHUB_ENV

      - name: Create EKS Node Group
        if: env.nodegroup_exists == 'false'
        run: |
          aws eks create-nodegroup \
            --cluster-name $CLUSTER_NAME \
            --nodegroup-name $NODEGROUP_NAME \
            --subnets subnet-0fa695d42ad8afd9d subnet-0ccd3fe783de143a2 \
            --node-role arn:aws:iam::133489939751:role/LabRole \
            --scaling-config minSize=1,maxSize=5,desiredSize=2 \
            --instance-types t3.medium \
            --ami-type AL2_x86_64 \
            --disk-size 20 \
            --capacity-type ON_DEMAND \
            --update-config maxUnavailable=1

      - name: Wait for EKS Node Group to be Active
        if: env.nodegroup_exists == 'false'
        run: |
          aws eks wait nodegroup-active --cluster-name $CLUSTER_NAME --nodegroup-name $NODEGROUP_NAME --region $AWS_REGION

  deploy-application:
    runs-on: ubuntu-latest
    needs: create-cluster
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v2
        with:
          version: 'v1.30.2' 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Apply Kubernetes configuration
        run: |
          kubectl apply -f pods/svc-quick-serve-api.yaml
          kubectl apply -f pods/configmap-quick-serve-api.yaml
          kubectl apply -f pods/configmap-quick-serve-db.yaml
          kubectl apply -f pods/secret-quick-serve-api.yaml
          kubectl apply -f pods/secret-quick-serve-db.yaml
          kubectl apply -f pods/quick-serve-api.yaml

      - name: Verify Deployment
        run: kubectl get pods,svc,configmaps,secrets,deployments,pv,pvc,hpa
